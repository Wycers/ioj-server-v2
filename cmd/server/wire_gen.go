// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"github.com/google/wire"
	"github.com/infinity-oj/server-v2/internal/app/accounts"
	controllers4 "github.com/infinity-oj/server-v2/internal/app/accounts/controllers"
	repositories5 "github.com/infinity-oj/server-v2/internal/app/accounts/repositories"
	services4 "github.com/infinity-oj/server-v2/internal/app/accounts/services"
	"github.com/infinity-oj/server-v2/internal/app/judgements"
	controllers3 "github.com/infinity-oj/server-v2/internal/app/judgements/controllers"
	repositories3 "github.com/infinity-oj/server-v2/internal/app/judgements/repositories"
	services2 "github.com/infinity-oj/server-v2/internal/app/judgements/services"
	"github.com/infinity-oj/server-v2/internal/app/problems"
	"github.com/infinity-oj/server-v2/internal/app/problems/controllers"
	"github.com/infinity-oj/server-v2/internal/app/problems/repositories"
	"github.com/infinity-oj/server-v2/internal/app/problems/services"
	"github.com/infinity-oj/server-v2/internal/app/processes"
	controllers5 "github.com/infinity-oj/server-v2/internal/app/processes/controllers"
	repositories4 "github.com/infinity-oj/server-v2/internal/app/processes/repositories"
	services5 "github.com/infinity-oj/server-v2/internal/app/processes/services"
	"github.com/infinity-oj/server-v2/internal/app/server"
	"github.com/infinity-oj/server-v2/internal/app/submissions"
	controllers2 "github.com/infinity-oj/server-v2/internal/app/submissions/controllers"
	repositories2 "github.com/infinity-oj/server-v2/internal/app/submissions/repositories"
	services3 "github.com/infinity-oj/server-v2/internal/app/submissions/services"
	"github.com/infinity-oj/server-v2/internal/app/volumes"
	controllers6 "github.com/infinity-oj/server-v2/internal/app/volumes/controllers"
	repositories6 "github.com/infinity-oj/server-v2/internal/app/volumes/repositories"
	services6 "github.com/infinity-oj/server-v2/internal/app/volumes/services"
	"github.com/infinity-oj/server-v2/internal/app/volumes/storages"
	"github.com/infinity-oj/server-v2/internal/pkg/config"
	"github.com/infinity-oj/server-v2/internal/pkg/database"
	"github.com/infinity-oj/server-v2/internal/pkg/files"
	"github.com/infinity-oj/server-v2/internal/pkg/jaeger"
	"github.com/infinity-oj/server-v2/internal/pkg/log"
	"github.com/infinity-oj/server-v2/internal/pkg/transports/http"
)

// Injectors from wire.go:

func CreateApp(cf string) (*server.Application, error) {
	viper, err := config.New(cf)
	if err != nil {
		return nil, err
	}
	options, err := log.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	logger, err := log.New(options)
	if err != nil {
		return nil, err
	}
	serverOptions, err := server.NewOptions(viper, logger)
	if err != nil {
		return nil, err
	}
	httpOptions, err := http.NewOptions(viper)
	if err != nil {
		return nil, err
	}
	databaseOptions, err := database.NewOptions(viper, logger)
	if err != nil {
		return nil, err
	}
	db, err := database.New(databaseOptions)
	if err != nil {
		return nil, err
	}
	repository := repositories.New(logger, db)
	problemsService := services.NewProblemService(logger, repository)
	controller := controllers.New(logger, problemsService)
	initProblemGroupFn := problems.CreateInitControllersFn(controller)
	repositoriesRepository := repositories2.NewMysqlSubmissionsRepository(logger, db)
	repository2 := repositories3.NewJudgementRepository(logger, db)
	repository3 := repositories4.New(logger, db)
	judgementsService := services2.NewJudgementsService(logger, repository2, repository, repository3, repositoriesRepository)
	submissionsService := services3.NewSubmissionService(logger, repositoriesRepository, repository, judgementsService)
	controllersController := controllers2.New(logger, submissionsService)
	initSubmissionGroupFn := submissions.CreateInitControllersFn(controllersController)
	controller2 := controllers3.New(logger, judgementsService)
	initJudgementGroupFn := judgements.CreateInitControllersFn(controller2)
	repository4 := repositories5.New(logger, db)
	service := services4.New(logger, repository4)
	controller3 := controllers4.New(logger, service)
	initAccountGroupFn := accounts.CreateInitControllersFn(controller3)
	processesService := services5.NewProcessService(logger, repository3)
	controller4 := controllers5.New(logger, processesService)
	initProcessGroupFn := processes.CreateInitControllersFn(controller4)
	filesOptions, err := files.NewOptions(viper, logger)
	if err != nil {
		return nil, err
	}
	fileManager, err := files.New(filesOptions)
	if err != nil {
		return nil, err
	}
	storage := storages.NewFileManager(logger, fileManager)
	repository5 := repositories6.NewRepository(logger, db)
	servicesService := services6.NewVolumeService(logger, storage, repository5)
	controller5 := controllers6.New(logger, servicesService)
	initVolumnGroupFn := volumes.CreateInitControllersFn(controller5)
	initControllers := server.CreateInitControllersFn(initProblemGroupFn, initSubmissionGroupFn, initJudgementGroupFn, initAccountGroupFn, initProcessGroupFn, initVolumnGroupFn)
	configuration, err := jaeger.NewConfiguration(viper, logger)
	if err != nil {
		return nil, err
	}
	tracer, err := jaeger.New(configuration)
	if err != nil {
		return nil, err
	}
	engine := http.NewRouter(httpOptions, logger, initControllers, tracer)
	httpServer, err := http.New(httpOptions, logger, engine)
	if err != nil {
		return nil, err
	}
	application, err := server.NewApp(serverOptions, logger, httpServer)
	if err != nil {
		return nil, err
	}
	return application, nil
}

// wire.go:

var providerSet = wire.NewSet(log.ProviderSet, config.ProviderSet, http.ProviderSet, server.ProviderSet, database.ProviderSet, jaeger.ProviderSet, files.ProviderSet, problems.ProviderSet, submissions.ProviderSet, judgements.ProviderSet, accounts.ProviderSet, processes.ProviderSet, volumes.ProviderSet)
